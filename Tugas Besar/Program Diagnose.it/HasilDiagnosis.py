# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HalamanHasilDiagnosis.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from operator import itemgetter
import pymysql


class Ui_HasilDiagnosis(object):
    def __init__(self):
        # inisialisasi database yang dipakai
        con = pymysql.connect(db='db_diagnosispenyakit', user='root', passwd='', host='localhost', port=3306, autocommit=True)
        self.cur = con.cursor()

    # Membuka halaman hasil diagnosis
    def bukaHalamanDetailPenyakit(self):
        from DetailPenyakit import Ui_DetailPenyakit
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_DetailPenyakit()
        self.ui.setupUi(self.window)
        self.window.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 715)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(100, 40, 811, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(40, 130, 911, 461))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        self.tableWidget.setSizePolicy(sizePolicy)
        self.tableWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.tableWidget.setSizeIncrement(QtCore.QSize(0, 0))
        self.tableWidget.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        self.tableWidget.setFont(font)
        self.tableWidget.setFrameShape(QtWidgets.QFrame.Panel)
        self.tableWidget.setFrameShadow(QtWidgets.QFrame.Plain)
        self.tableWidget.setLineWidth(1)
        self.tableWidget.setMidLineWidth(0)
        self.tableWidget.setAutoScroll(True)
        self.tableWidget.setAutoScrollMargin(16)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.AnyKeyPressed|QtWidgets.QAbstractItemView.EditKeyPressed)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(True)

        self.tableWidget.setColumnWidth(0, 350)
        self.tableWidget.setColumnWidth(1, 534)

        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)

        self.cekDetailPenyakit_Button = QtWidgets.QPushButton(self.centralwidget)
        self.cekDetailPenyakit_Button.setGeometry(QtCore.QRect(810, 610, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(12)
        self.cekDetailPenyakit_Button.setFont(font)
        self.cekDetailPenyakit_Button.setObjectName("cekDetailPenyakit_Button")
        self.cekDetailPenyakit_Button.clicked.connect(self.cekDetail)
        self.cekDetailPenyakit_Button.clicked.connect(self.bukaHalamanDetailPenyakit)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Berdasarkan gejala yang anda cari dapat di diagnosa penyakitnya sebagai berikut :"))
        self.tableWidget.setHorizontalHeaderLabels(["Nama Penyakit", "Total Gejala Yang Sesuai Dengan Penyakit"])
        self.cekDetailPenyakit_Button.setText(_translate("MainWindow", "Cek Detail"))

        ########################################################################################################
        # Mengambil Semua Daftar Gejala Yang Dialami Kedalam Database
        ########################################################################################################
        sql = "SELECT distinct histori_cariGejala from historiUser"
        self.cur.execute(sql)

        gejalaYangDialami = [] # Array untuk menampung daftar gejala penyakit yang dialami dari database

        for y in self.cur.fetchall(): # Memasukan hasil gejala penyakit yang dialami kedalam array
            gejalaYangDialami += y

        ########################################################################################################
        # Melakukan Diagnosis Penyakit Berdasarkan Gejala Yang Dialami
        ## Diagnosis Dilakukan Dengan Mencocokan Gejala Yang dialami Dengan Gejala Yang Ada Pada Penyakit
        ########################################################################################################
        sql = "SELECT distinct namaPenyakit from penyakit"
        self.cur.execute(sql)

        daftarPenyakit_PadaDatabase = [] # Array untuk menampung daftar penyakit yang ada pada database

        for j in self.cur.fetchall():
            daftarPenyakit_PadaDatabase += j

        jumlahGejalaBenarTiapTabel = [] # Array untuk menampung jumlah gejala yang dialami sama dengan gejala pada penyakit

        jumlahGejalaBenar = 0
        for namaPenyakit in daftarPenyakit_PadaDatabase: # Looping daftar penyakit
            for gejalaYangDirasa in gejalaYangDialami: # Looping daftar gejala yang dialami
                sql = "SELECT distinct gejala from detailPenyakit where namaPenyakit = '%s'" % namaPenyakit
                self.cur.execute(sql)

                gejalaPadaPenyakit = [] # Array untuk menampung daftar gejala penyakit sesuai dengan nama penyakitnya
                for namaGejala in self.cur.fetchall(): # Memasukan hasil pencarian gejala sesuai dengan penyakitnya dari database kedalam array
                    gejalaPadaPenyakit += namaGejala

                for gejalaPadaPenyakit in gejalaPadaPenyakit: # Mencocokan antara gejala yang dialami dengan gejala pada penyakit
                    if gejalaYangDirasa == gejalaPadaPenyakit: # Jika gejala gejala yang dialami sama dengan gejala pada penyakit
                        jumlahGejalaBenar += 1 # Maka, jumlah gejala benar ditambah (+) 1
            if jumlahGejalaBenar != 0: # Jika hasil jumlah gejala yang benar tidak sama dengan 0
                jumlahGejalaBenarTiapTabel.append([namaPenyakit, jumlahGejalaBenar]) # Maka, masukan namaPenyakit dan jumlah gejala yang benar kedalam array

            jumlahGejalaBenar = 0 # Jumlah gejala benar kembali ke set semula

        ########### Sorting Urutan Hasil Diagnosis Tiap Penyakit Berdasarkan Jumlah Benar Pada Gelaja Yang Dialami ###########
        hasilPengurutanDiagnosisPenyakit = sorted(jumlahGejalaBenarTiapTabel, key=itemgetter(1), reverse=True)

        # Memisah nama penyakit dan jumlah gejala benar yang sudah di dilakukan sorting sebelumnya
        hasilDiagnosis_NamaPenyakit = np.delete(hasilPengurutanDiagnosisPenyakit, 0, 1)
        hasilDiagnosis_JumlahBenar = np.delete(hasilPengurutanDiagnosisPenyakit, 1, 1)


        ########################################################################################################
        # Menampilkan Hasil Diagnosis Kedalam Tabel Widget
        ########################################################################################################
        self.tableWidget.setRowCount(len(hasilDiagnosis_JumlahBenar)) # Set jumlah baris yang akan digunakan

        tableRow1 = 0
        for row1 in hasilDiagnosis_NamaPenyakit: # Memasukan nama penyakit kedalam Tabel Widget
            self.tableWidget.setItem(tableRow1, 1, QtWidgets.QTableWidgetItem(row1[0]))
            tableRow1 += 1

        tableRow2 = 0
        for row2 in hasilDiagnosis_JumlahBenar: # Memasukan jumlah gejala benar pada penyakit kedalam Tabel Widget
            self.tableWidget.setItem(tableRow2, 0, QtWidgets.QTableWidgetItem(row2[0]))
            tableRow2 += 1

        for hapus_gejalaYangDialami_PadaDatabase in gejalaYangDialami: # Hapus histori gejala yang dialami pada database
            sql = "DELETE FROM `historiUser` WHERE `histori_cariGejala` = '%s';" % hapus_gejalaYangDialami_PadaDatabase
            self.cur.execute(sql)

    # Memasukan nama penyakit yang akan di lihat detailnya kedalam database
    def cekDetail(self):
        row = self.tableWidget.currentRow()
        if row >= 0:
            dataRow = self.tableWidget.item(row, 0).text()
            sql = "insert into historiUser (histori_cekDetailPenyakit) VALUES ('%s')" % dataRow
            self.cur.execute(sql)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_HasilDiagnosis()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
